// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: request.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouterClient interface {
	RestSubscribe(ctx context.Context, opts ...grpc.CallOption) (Router_RestSubscribeClient, error)
	RPCSubscribe(ctx context.Context, opts ...grpc.CallOption) (Router_RPCSubscribeClient, error)
}

type routerClient struct {
	cc grpc.ClientConnInterface
}

func NewRouterClient(cc grpc.ClientConnInterface) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) RestSubscribe(ctx context.Context, opts ...grpc.CallOption) (Router_RestSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Router_ServiceDesc.Streams[0], "/Router/RestSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerRestSubscribeClient{stream}
	return x, nil
}

type Router_RestSubscribeClient interface {
	Send(*RestRequest) error
	Recv() (*RestResponse, error)
	grpc.ClientStream
}

type routerRestSubscribeClient struct {
	grpc.ClientStream
}

func (x *routerRestSubscribeClient) Send(m *RestRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routerRestSubscribeClient) Recv() (*RestResponse, error) {
	m := new(RestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routerClient) RPCSubscribe(ctx context.Context, opts ...grpc.CallOption) (Router_RPCSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Router_ServiceDesc.Streams[1], "/Router/RPCSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerRPCSubscribeClient{stream}
	return x, nil
}

type Router_RPCSubscribeClient interface {
	Send(*RPCRequest) error
	Recv() (*RPCResponse, error)
	grpc.ClientStream
}

type routerRPCSubscribeClient struct {
	grpc.ClientStream
}

func (x *routerRPCSubscribeClient) Send(m *RPCRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routerRPCSubscribeClient) Recv() (*RPCResponse, error) {
	m := new(RPCResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouterServer is the server API for Router service.
// All implementations must embed UnimplementedRouterServer
// for forward compatibility
type RouterServer interface {
	RestSubscribe(Router_RestSubscribeServer) error
	RPCSubscribe(Router_RPCSubscribeServer) error
	mustEmbedUnimplementedRouterServer()
}

// UnimplementedRouterServer must be embedded to have forward compatible implementations.
type UnimplementedRouterServer struct {
}

func (UnimplementedRouterServer) RestSubscribe(Router_RestSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method RestSubscribe not implemented")
}
func (UnimplementedRouterServer) RPCSubscribe(Router_RPCSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method RPCSubscribe not implemented")
}
func (UnimplementedRouterServer) mustEmbedUnimplementedRouterServer() {}

// UnsafeRouterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouterServer will
// result in compilation errors.
type UnsafeRouterServer interface {
	mustEmbedUnimplementedRouterServer()
}

func RegisterRouterServer(s grpc.ServiceRegistrar, srv RouterServer) {
	s.RegisterService(&Router_ServiceDesc, srv)
}

func _Router_RestSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouterServer).RestSubscribe(&routerRestSubscribeServer{stream})
}

type Router_RestSubscribeServer interface {
	Send(*RestResponse) error
	Recv() (*RestRequest, error)
	grpc.ServerStream
}

type routerRestSubscribeServer struct {
	grpc.ServerStream
}

func (x *routerRestSubscribeServer) Send(m *RestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routerRestSubscribeServer) Recv() (*RestRequest, error) {
	m := new(RestRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Router_RPCSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouterServer).RPCSubscribe(&routerRPCSubscribeServer{stream})
}

type Router_RPCSubscribeServer interface {
	Send(*RPCResponse) error
	Recv() (*RPCRequest, error)
	grpc.ServerStream
}

type routerRPCSubscribeServer struct {
	grpc.ServerStream
}

func (x *routerRPCSubscribeServer) Send(m *RPCResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routerRPCSubscribeServer) Recv() (*RPCRequest, error) {
	m := new(RPCRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Router_ServiceDesc is the grpc.ServiceDesc for Router service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Router_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Router",
	HandlerType: (*RouterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RestSubscribe",
			Handler:       _Router_RestSubscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RPCSubscribe",
			Handler:       _Router_RPCSubscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "request.proto",
}
